---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: data-grafana-{{ .Release.Namespace }}
  namespace: {{ .Release.Namespace }}
spec:
  accessModes:
  - ReadWriteMany
  resources:
    requests:
      storage: {{ .Values.storageCapacity.grafana }}
{{- if eq .Values.storage_type "manual" }}
  selector:
    matchLabels:
      type: local
      name: data-grafana-{{ .Release.Namespace }}
{{- end }}
  storageClassName: {{ .Values.storageclass_name }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: grafana
  name: grafana
  namespace: {{ .Release.Namespace }}
spec:
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
#      nodeSelector:
#        role: k2.unified-portal-automation   
      securityContext:
        fsGroup: 472
        supplementalGroups:
        - 0
{{- if eq .Values.private_registry true }}
      imagePullSecrets:
      - name: {{ .Values.secret }}
{{- end }}
      containers:
      - name: grafana
        image: {{ .Values.prometheus_container_rgistry_url }}/{{ .Values.image.grafana }}
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http-grafana
          protocol: TCP
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /robots.txt
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 5
          timeoutSeconds: 20
        livenessProbe:
          failureThreshold: 5
          initialDelaySeconds: 30
          periodSeconds: 5
          successThreshold: 1
          tcpSocket:
            port: 3000
          timeoutSeconds: 1
        resources:
          {{- include "resources.grafana" . | nindent 10 }}
        volumeMounts:
        - name: vol-data-grafana-{{ .Release.Namespace }}
          mountPath: /var/lib/grafana
      volumes:
      - name: vol-data-grafana-{{ .Release.Namespace }}
        persistentVolumeClaim:
          claimName: data-grafana-{{ .Release.Namespace }}
---
apiVersion: v1
kind: Service
metadata:
  name: svc-grafana
  namespace: {{ .Release.Namespace }}
spec:
  ports:
  - port: 3000
    protocol: TCP
    targetPort: http-grafana
    nodePort: 30902
  selector:
    app: grafana
  sessionAffinity: None
  type: NodePort
