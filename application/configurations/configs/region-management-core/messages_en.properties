region.invalidRequestParams.message=INVALID_REQUEST_PARAMS
region.success.message=SUCCESS
region.type.update.success.message=Location Type updated successfully

region.recordAddedSuccessfully.message=Record Added Successfully
region.recordUpdatedSuccessfully.message=Record Updated Successfully
region.alreadyExists.message=Region/Circle already exist with this name
region.regionRemoved.message=Region/Circle removed for id: {0}
region.noRecordFound.message=No Records found for Region/Circle
region.noRecordForDeletion.message=Could not find Region/Circle in system for delete for Id: {0}
region.issueInSaving.message=There was some issue in saving Circle/Region
region.category.fetch.failed.message=Failed to fetch location category
region.fetch.failed.message=Failed to fetch region
region.parent.fetch.failed.message=Failed to fetch Location Parent
region.update.failed.due.to.message=Failed to update location due to: {0}

RegionTypeServiceImpl.region.type.does.not.exit.message=Given RegionType does NOT exist
RegionTypeServiceImpl.region.type.relevant.regions.already.exist.message=Given RegionType cannot be deleted as relevant regions already exist in the system
RegionTypeServiceImpl.region.type.below.level.exist.message=Given RegionType cannot be deleted as location types below this level already exist
RegionTypeServiceImpl.regionTypeLevelExists.message=Location Type of provided level already exists
RegionTypeServiceImpl.regionSaveSuccessful.message=Location Type saved successfully
RegionTypeServiceImpl.regionUpdateSuccessful.message=Location Type updated successfully
RegionTypeServiceImpl.regionTypeNotFound.message=Location Type NOT FOUND
RegionTypeServiceImpl.regionDeletionSuccessful.message=Location Type deleted successfully

AccountResellerResponseComposer.couldNotFoundAccount.message=Could not find any accounts for:

CellsController.cellDeletedSuccessfully.message=Cell deleted successfully.
CellsController.cellUpdatedSuccessfully.message=Cell ID updated successfully.
CellsController.cellCreatedSuccessfully.message=Cell ID created successfully.

CircleController.listOfCircles.message=List of distinct Circles/Regions by id: {0}

RegionController.listOfRegionsAtLevel.message=List of Regions at level: {0}
RegionController.listOfRegions.message=List of all regions
RegionController.hierarchyCreated.message=Regions hierarchy created.
RegionController.idNotProvided.message=Location Id not provided
RegionController.blankName.message=location name is blank
RegionController.blankId.message=location id is blank
RegionController.blankOwner.message=owner name is blank
RegionController.regionDeletedSuccessfully.message=Location deleted successfully
RegionController.boundariesCreatedSuccessfully.message=location boundaries created successfully
RegionController.ovaNotExist.message=OVA account doesn`t exist
RegionController.accountsFound.message=Found accounts
RegionController.distinctDistrictsList.message=List of distinct districts
RegionController.associatedRegionsList.message=List of associated regions
RegionController.oneSearchAttributeRequired.message=Need at least one search attribute
RegionController.regionsList.message=The List Of Regions
RegionController.unknownHTTPCode.message=Location Detail for msisdn {0} returned unknown HTTP status code: {1}
RegionController.problemWithLocationData.message=Problem with location data source
RegionController.MSISDNDoNotBelongToCell.message=The given MSISDN does not belong to a valid cell
RegionController.MSISDNBelongToCell.message=The given MSISDN belongs to a valid cell
RegionController.locationCaptureDisabledForChannel.message=location capture is disabled for channel {0}
RegionController.locationCaptureDisabledForResellerType.message=location capture is disabled for resellerType {0}
RegionController.fieldsNotBlank.message=msisdn, channel, and resellerType should not be blank
RegionController.upstreamErrorByPassRule.message=Upstream error in cell-id  for msisdn: {0}. HTTP status code: {1} but setting it to SUCCESS to pass the rule.

AllowedTransfersServiceImpl.transferDeletedSuccessful.message=Allowed Transfer deleted successfully
AllowedTransfersServiceImpl.transferUpdateSuccessful.message=Allowed Transfer updated successfully
AllowedTransfersServiceImpl.fromToRegionNotFoundInTransfer.message=From and/or To location not found in Location to be updated in given allowed transfer
AllowedTransfersServiceImpl.noChangeFound.message=No change found to update
AllowedTransfersServiceImpl.transfersPartiallyAdded.message=Allowed transfers partially added
AllowedTransfersServiceImpl.transfersAddedComplete.message=All allowed transfers added successfully
AllowedTransfersServiceImpl.failedToAddTransfers.message=Failed to add allowed transfers
AllowedTransfersServiceImpl.transfersAddedSuccessfully.message=Allowed Transfer added successfully.
AllowedTransfersServiceImpl.fromToRegionExistsForRow.message=From and To location already exist in allowed transfer for row {0}
AllowedTransfersServiceImpl.fromToRegionExists.message=From and To location already exist in allowed transfer
AllowedTransfersServiceImpl.fromToRegionNotFound.message=From and/or To location not found in Region
AllowedTransfersServiceImpl.fromToRegionNotFoundForRow.message=From and/or To location not found in Location for row: {0}
AllowedTransfersServiceImpl.fromToTransferAllowed.message=From location `{0}` To location `{1}` transfer is Allowed
AllowedTransfersServiceImpl.fromToTransferNotAllowed.message=From location `{0}` To location `{1}` transfer is not Allowed

RegionMappingServiceImpl.region.mapping.invalid.message=Mapping for Admin Thana Id:[{0}] to Market Thana Id:[{1}] is Invalid
RegionMappingServiceImpl.region.mapping.exists.message=Mapping between the Market Thana and Admin Thana already exists in the system
RegionMappingServiceImpl.region.mapping.already.mapped.message=Market Thana is already mapped to another Admin Thana
RegionMappingServiceImpl.region.mapping.add.success.message=Thana mapping done successfully
RegionMappingServiceImpl.region.mapping.update.success.message=Thana mapping updated successfully
RegionMappingServiceImpl.region.mapping.not.leaf.region.message=Master and slave regions need to be leaf regions
RegionMappingServiceImpl.region.mapping.non.unique.message=The provided value for admin thana:[{0}] and market thana:[{1}] mapping is same as the existing one for the given LeafRegionMappingId:[{2}].

RegionServiceImpl.region.field.update.message=Location updated successfully
RegionServiceImpl.region.name.updated.to.message=Location name updated to: {0}
RegionServiceImpl.region.parent.updated.to.message=Location parentId updated to: {0}
RegionServiceImpl.region.field.not.updated.for.id.message=No fields updated for regionId: {0}
RegionServiceImpl.region.not.found.by.id.message=Location does NOT exist for regionId: {0}
RegionServiceImpl.region.parent.not.valid.message=Location parentRegionId:[{0}] is NOT on the same parent-node-level with regionId:[{1}]

RegionServiceImpl.invalidLevelSpecified.message=an invalid level {0} specified
RegionServiceImpl.noRegionFoundAtLevel.message=no location found at level {0}
RegionServiceImpl.regionAtTopLevel.message=Location {0} at topmost level:1 can not have any parent regionId
RegionServiceImpl.parentRegionCannotBeBlank.message=Parent Location cannot be blank for level {0}. Please provide the Parent Region`s name
RegionServiceImpl.parentNotFoundForRegion.message=parent regionId {0} not found at level {1} for regionId {2}
RegionServiceImpl.errorSavingLocation.message=Error saving location details in database
RegionServiceImpl.upstreamErrorLookup.message=Upstream error in cell-id lookup for msisdn: {0}. Http status code: {1} <{2}>
RegionServiceImpl.upstreamLookupUnknownHttpCode.message=Cell-id lookup for msisdn {0} returned unknown HTTP status code: {1}
RegionServiceImpl.exceptionThrown.message=Exception thrown while processing request
RegionServiceImpl.setCellIdUrl.message=cellIdSource.url must be set
RegionServiceImpl.setLinkUrl.message=link_service.url must be set
RegionServiceImpl.noRegionFoundForName.message=no location found for location name: {0}
RegionServiceImpl.associateRegionResolved.message=Resolved associated region
RegionServiceImpl.noRegionForId.message=no location found for regionId: {0}
RegionServiceImpl.noRegionForIdAndCategoryId.message=No location found for location Id: {0} and CategoryId: {1}
RegionServiceImpl.noRegionForCriteria.message=No Regions found against given criteria
RegionServiceImpl.noRegionAtLevel.message=no location found at level: {0}
RegionServiceImpl.districtsNotFound.message=Districts/Regions not found in the system
RegionServiceImpl.resolvedRegion.message=resolved region: {0}
RegionServiceImpl.noOwnerAssigned.message=no owner assigned yet to location {0} at level {1}
RegionServiceImpl.noRegionWithOwner.message=No location found with owner: {0}
RegionServiceImpl.regionAlreadyExists.message=location name or id already exists
RegionServiceImpl.regionAtInvalidLevel.message=location name {0} is at an invalid level {1}
RegionServiceImpl.regionNotFoundAtLevel.message=location {0} not found at level {1}
RegionServiceImpl.noLowestRegionWithName.message=no lowest level location found with name {0}
RegionServiceImpl.recordNotFoundForType.message=Record not found for location type {0}
RegionServiceImpl.noRecordForUniqueId.message=Record not found for location unique {0}
RegionServiceImpl.noOwnerFoundAtLevel.message=no owner found for location {0} at level {1}
RegionServiceImpl.ownerParentNotInSameHierarchy.message=owner`s parent {0} is not in the same location hierarchy as {1}
RegionServiceImpl.ownerAlreadyExists.message=An owner {0} already exists for location {1} at level {2}
RegionServiceImpl.ownerSavedSuccessfullyForRegion.message=location owner saved successfully for location {0} and owner {1}
RegionServiceImpl.ownerNotMapped.message=owner {0} not mapped for location {1} at level {2}
RegionServiceImpl.regionCantBeDeletedDueToChild.message=Location cannot be deleted because its child location found in it hierarchy
RegionServiceImpl.regionCantBeDeletedDueToMapping.message=Location cannot be deleted because mapping found in cells
RegionServiceImpl.regionCantBeDeletedDueToAllowedTransfer.message=Location cannot be deleted because mapping found in allowed transfer
RegionServiceImpl.noRegionForNameAndLevel.message=no location found with name {0} at level {1}
RegionServiceImpl.parentNotRequired.message=Parent Id not required for creating regions with level 1.
RegionServiceImpl.invalidParent.message=Provided parent id is not an appropriate parent for creating location with level: {0} & category: {1}.

CellsServiceImpl.cellExists.message=Cell {0} already exists!
CellsServiceImpl.invalidRegionEntry.message=Invalid location entered
CellsServiceImpl.cellInfoSaveSuccessful.message=Cell info added successfully
CellsServiceImpl.cellInfoUpdateSuccessful.message=Cell info updated successfully
CellsServiceImpl.cellInfoDeleteSuccessful.message=Cell info deleted successfully

ModelValidator.levelParameterNotValid.message=level parameter value is not a valid number
ModelValidator.blankLevel.message=level {0} is blank
ModelValidator.blankLatitude.message=latitude {0} is blank
ModelValidator.invalidLatitude.message=latitude {0} is not a valid number
ModelValidator.latitudeOutOfRange.message=latitude {0} is not within the valid range < -90 to 90 >
ModelValidator.blankLongitude.message=longitude {0} is blank
ModelValidator.invalidLongitude.message=longitude {0} is not a valid number
ModelValidator.longitudeOutOfRange.message=longitude {0} is not within the valid range < -180 to 180 >

RegionBoundaryRepositoryCustomImpl.alreadyRegisteredBoundary.message=Boundary already registered for this location id {0}
RegionBoundaryRepositoryCustomImpl.unableToSaveBoundary.message=unable to save the boundary for location id: {0}
RegionBoundaryRepositoryCustomImpl.noRegionRegisteredForPosition.message=No location registered for this position {0}

RegionBoundaryServiceImpl.coordinatesNotFormingClosedRegion.message=The input coordinates for location {0} do not form a closed region
RegionBoundaryServiceImpl.cellDetailsNotFoundForIdnName.message=Cell details not found for cell Id: {0} cell Name: {1}
RegionBoundaryServiceImpl.cellDetailsNotFoundForId.message=Cell details not found for cell Id: {0}

RegionTypeServiceImpl.regionTypeLevelCategoryExists.message=A Location type with the given level already exists in the system.
RegionCategoryTypeServiceImpl.categoryIdNotFound.message=Location category not found with id: [{0}]
RegionTypeServiceImpl.regionTypeSaveSuccessful.message=Location Type created successfully
RegionTypeServiceImpl.regionTypePreLevelNotExists.message=The given parent location type level does not exist in the system.
JaxValidationExceptionHandler.argumentNotValid.default=Invalid value [{0}] provided in the request for field: [{1}]
JaxValidationExceptionHandler.jsonMappingNotValid.default=Invalid values provided for the fields [{0}].
RegionTypeRequest.level.valueLessThanAllowed=Provided value: [{0}] in the field: [{1}] is not allowed. Min allowed is 1.
RegionTypeRequest.level.decimalNotAllowed=Decimal value: [{0}] not allowed for field: [{1}].
RegionTypeServiceImpl.nonUniqueRegionTypeName.message=Location type for the selected category with the given name already exists in the system.
RegionTypeServiceImpl.regionTypeNameExists.message= A Location type with the given Name already exists in the system.
RegionTypeRequest.regionTypeName.empty=Location Type Name should not be null or empty.
ModelValidator.regionTypeWithCategoryOrLevel.message = RegionTypeId can not exist with CategoryId or Level in the request
ModelValidator.regionTypeIdInvalid.message = RegionTypeId should be greater than 0
ModelValidator.categoryOrLevelMissingWithRegionType.message = CategoryId or Level can not be empty if RegionTypeId does not exist
ModelValidator.categoryIdOrLevelInvalid.message = CategoryId or Level should be greater than 0
ModelValidator.parentNotProvided.message = Parent Location Id not provided for level > 1
RegionServiceImpl.regionTypeNotFound.message = Couldn't derive location type from the derived input
RegionServiceImpl.parentMissing.message = Parent location required for adding location with level greater than 1
RegionServiceImpl.createdSuccess.message = Location created successfully
region.failure.message=Internal Error Occurred

RegionTypeServiceImpl.fetch.failed.message=Failed to fetch location type
RegionServiceImpl.regionIdExist.message=Location Id: {0} already exists.
RegionController.fetch.failed.message=Failed to fetch regions.
RegionServiceImpl.categoryNotFoundByIdAndName.message=Location category not found with id: [{0}] and name: [{1}]
RegionServiceImpl.region.not.found.by.idAndCategory.message=Location does NOT exist for regionId: [{0}] and categoryId [{1}] and category name [{2}]
RegionServiceImpl.mapped.regionsByIdAndCategory.success.message=Mapped regions fetched successfully by location ID: [{0}], categoryId [{1}] and categoryName [{2}]
region.fetch.failed.due.to.message=Failed to fetch mapped regions due to: {0}

RegionServiceImpl.regionNotFound=Region not found with id: [{0}]
RegionServiceImpl.regionChildFetchFailed=Failed to fetch region with id: [{0}]